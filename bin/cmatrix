#!/usr/bin/env python3
import argparse
import csv
import datetime
import distutils.dir_util as dutil
import fnmatch
import glob
import logging
import multiprocessing as mp
import os
import pprint
import re
import shutil
import subprocess
from os.path import dirname, realpath, join, exists


#---- Script Constants ---------------------------------------------------------
CMATRIX_ROOT = dirname(dirname(realpath(__file__)))

#---- Helper Classes -----------------------------------------------------------
class ProjectStructure:
    def __init__(self, case_file):

        # Get abspath to the project root directory (directory containing the
        # case matrix definitition file). This may be in a directory above the
        # current working directory, so we ascend upward until the file is found.
        # Error is thrown if the file cannot be located.
        cwd = os.getcwd()
        while cwd != dirname(cwd): # Fails at filesystem root
            if exists(join(cwd, case_file)):
                self.project_root = cwd
                self.case_file = join(cwd, case_file)
                break
            cwd = dirname(cwd)
        else:
            logging.exception(
                'Casefile "%s" not in current directory or any parent directory',
                case_file
            )
            raise RuntimeError()

        # Set project paths and files
        self.templates    = join(self.project_root, "templates") # Location of case templates
        self.working      = join(self.project_root, "working")   # Location of in-progress calculations
        self.archive      = join(self.project_root, "archive")   # Location of completed calculations
        self.replace_list = "replace.txt"                        # List files requiring param replacement
        self.run_script   = "run.sh"                             # Script executed/submitted for each case


#---- Helper Functions ---------------------------------------------------------
def replace_tokens(filename, tokens):
    ''' Replace keys(tokens) with values(tokens) in filename '''

    with open(filename) as fin:
        contents = fin.read()

    # Black Magic: Replaces all placeholders in a file in one pass
    # Based on http://stackoverflow.com/questions/6116978
    pattern  = re.compile('|'.join(re.escape(k) for k in tokens.keys()))
    contents = pattern.sub(lambda t: tokens[t.group(0)], contents)

    with open(filename, 'w') as fout:
        fout.write(contents)

def update_case_files(case_path, replace_file, case_dict):
    ''' Performs token replacement on files from template '''
    home = os.getcwd()
    case_tokens = { '<<' + k + '>>':v for k,v in case_dict.items() }
    try:
        os.chdir(case_path)
        with open(replace_file) as rlist:
            for pattern in rlist:
                pattern = pattern.strip()
                if pattern and not pattern.startswith('#'):
                    for filename in glob.glob(pattern):
                        replace_tokens(join(case_path, filename), case_tokens)
    except:
        logging.exception(
            ('Error performing token replacement:\n'
            '  Case Directory: "%s"\n'
            '  Case Variables:\n  %s'),
            case_path,
            pprint.pformat(case_dict, width=1, indent=4),
        )
    finally:
        os.chdir(home)

def run_case(case_path):
    ''' Run a single case on the local machine '''
    pid = mp.current_process().name
    cname = os.path.basename(case_path)
    print(f'{timestamp()} | {pid} | Starting {cname}')
    home = os.getcwd()
    try:
        os.chdir(case_path)
        if exists('Makefile') or exists('makefile'):
            subprocess.check_output(['make'])
        elif exists('run.sh'):
            subprocess.check_output(['run.sh'])
        else:
            raise RuntimeError(f'Could not find entry point to run {cname}.')
    finally:
        os.chdir(home)
    print(f'{timestamp()} | {pid} | Finished {cname}')

def timestamp():
    ''' Returns a string representing the current time '''
    return datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

def try_float(val):
    ''' Attempts conversion to float; if fails, returns original string '''
    try:
        return float(val)
    except:
        return val

def matches_selector(selector, case_dict):
    ''' Examines the case dictionary to determine if case matches the
        selector. The selector may be either a glob expression that is
        used to filter cases based on their case names or an arbitrary
        python conditional expression involving the entires in the case
        dictionary '''
    cname = case_dict['name']
    if fnmatch.fnmatchcase(cname, selector):
        logging.debug('%s: Selector matched case name.', cname)
        return True
    try:
        case_dict = { k:try_float(v) for k,v in case_dict.items() }
        result = eval(selector, {}, case_dict)
        assert(result is True or result is False)
        logging.debug('%s: Selector evaluated to %s', cname, result)
        return result
    except Exception as e:
        logging.debug(
            ('%s: Exception while evaluating user supplied conditional:\n'
            '  Conditional: "%s"\n'
            '  Exception Type: %s\n'
            '  Exception Message: %s\n'
            '  Case Variables:\n  %s'),
            cname,
            selector,
            e.__class__.__name__, e,
            pprint.pformat(case_dict, width=1, indent=4),
        )

def case_generator(filename):
    ''' Yeilds dicts with row data from the (filtered) case matrix '''
    with open(filename) as csvfile:
        keys = [s.strip() for s  in csvfile.readline().split(',')]
        for row in csv.DictReader(csvfile, fieldnames = keys):
            row = { k:v.strip() for k,v in row.items() }
            if matches_selector(args.selector, row):
                yield row


#---- Subcommands --------------------------------------------------------------
def init(args):
    ''' Creates the directory structure required for cmatrix '''
    if exists(args.folder):
        logging.warning(
           'Did not create case matrix at "%s"! Folder already exists!',
           args.folder,
        )
    else:
        try:
            shutil.copytree(join(CMATRIX_ROOT, 'template'), args.folder)
            logging.info('Created empty case matrix at "%s"', args.folder)
        except:
            logging.exception(
                'Failed to create case matrix at "%s"!',
                args.folder,
            )

def create(proj, args):
    ''' Constructs empty case directories from templates + case matrix '''
    for case in case_generator(proj.case_file):
        cname = case['name']
        if exists(join(proj.archive, cname)):
            logging.info('%s was skipped (archived)', cname)
            continue
        src = join(proj.templates, case['template'])
        dst = join(proj.working, cname)
        if exists(dst):
            if args.force:
                clear_existing = True
            else:
                clear_existing = input('Remove %s? [y/n]  ' % dst) == 'y'
            if clear_existing:
                shutil.rmtree(dst)
            else:
                logging.warning('%s was skipped (case already exists)', cname)
                continue
        shutil.copytree(src, dst, symlinks = True)
        update_case_files(dst, proj.replace_list, case)
        logging.info('%s was created.', cname)

def run(proj, args):
    ''' Executes cases on the local machine '''

    # Get working directories for all cases to run
    case_paths = []
    for case in case_generator(proj.case_file):
        cname = case['name']
        if exists(join(proj.archive, cname)):
            logging.info('%s was skipped (archived)', cname)
            continue
        if not exists(join(proj.working, cname)):
            logging.info('%s was skipped (no working files)', cname)
            continue
        case_paths.append(join(proj.working,cname))

    # Execute
    logging.info('Running %d cases using %d processes', len(case_paths), args.jobs)
    if args.jobs <= 1:
        for cp in case_paths:
            run_case(cp)
    else:
        with mp.Pool(processes=args.jobs) as pool:
            pool.map(run_case, case_paths)

def submit(proj, args):
    ''' Submits cases for execution using the qsub command '''
    home = os.getcwd()

    # Check that we have a queue system available
    try:
        subprocess.check_output(['qsub', '--version'])
    except:
        logging.error('qsub command not available on this machine! Try "cmatrix run".')
        return

    # Submit all cases
    for case in case_generator(proj.case_file):
        cname = case['name']
        if exists(join(proj.archive, cname)):
            logging.info('%s was skipped (archived)', cname)
            continue

        if not exists(join(proj.working, cname)):
            logging.warning('%s was skipped (working directory is missing)', cname)
            continue

        try:
            os.chdir(join(proj.working, cname))
            out = subprocess.check_output(['qsub'] + args.qargs + [proj.run_script])
            logging.info('%s started as %s', cname, out.strip())
        except:
            logging.exception('%s failed while issuing qsub command!', cname)
        finally:
            os.chdir(home)

def update(proj, args):
    ''' Re-generates case files in-place without deleting existing outputs '''
    home = os.getcwd()
    for case in case_generator(proj.case_file):
        cname = case['name']
        src = join(proj.templates, case['template'])
        dst = join(proj.working, cname)

        if not exists(dst):
            logging.info('%s was skipped (no case folder)', cname)
            continue

        # Copy template files, respecting symlinks and adding missing directories.
        # This is actually tricky to do because shutil.copytree requires a fresh
        # destination. distutils.dir_util.copy_tree will clobber, but will not
        # overwrite existing symlinks when preserve_symlinks=True... b/c reasons.
        try:
            os.chdir(src)
            for root, dirs, files in os.walk('.'):
                for dir in dirs:
                    src_dir = join(home, src, root, dir)
                    dst_dir = join(home, dst, root, dir)
                    if exists(dst_dir) and os.path.islink(dst_dir):
                        os.remove(dst_dir)
                        if os.path.islink(src_dir):
                            linkto = os.readlink(src_dir)
                            os.symlink(linkto, dst_dir)
                        else:
                            os.mkdir(dst_dir)

                    elif exists(dst_dir) and not os.path.islink(dst_dir):
                        if os.path.islink(src_dir):
                            logging.warning(
                                'Did not update "%s" with symlink to "%s".\n'
                                'Current object is a real directory. To proceed with update,\n'
                                'please manually remove the directory and re-run update.',
                                dst_dir, os.readlink(src_dir)
                            )
                        else:
                            pass

                    else:
                        if os.path.islink(src_dir):
                            linkto = os.readlink(src_dir)
                            os.symlink(linkto, dst_dir)
                        else:
                            os.mkdir(dst_dir)

                for file in files:
                    src_file = join(home, src, root, file)
                    dst_file = join(home, dst, root, file)
                    if exists(dst_file):
                        os.remove(dst_file)
                    if os.path.islink(src_file):
                        linkto = os.readlink(src_file)
                        os.symlink(linkto, dst_file)
                    else:
                        shutil.copy(src_file, dst_file)
        finally:
            os.chdir(home)

        # Do token replacement
        update_case_files(dst, proj.replace_list, case)
        logging.info('%s was updated.', cname)


#---- Argument Parser ----------------------------------------------------------
def build_parser():
    ''' Constructs command line argument parser '''

    # Top level parser
    parser = argparse.ArgumentParser(
        description = 'Utility for managing a case matrix',
    )
    parser.add_argument(
        '-v', '--verbose',
        help = 'Show detailed output log',
        action = 'store_const',
        dest = 'loglevel',
        const = logging.INFO,
        default = logging.WARNING,
    )
    parser.add_argument(
        '-d', '--debug',
        help = 'Show all debugging output',
        action = 'store_const',
        dest = 'loglevel',
        const = logging.DEBUG,
    )
    subparsers = parser.add_subparsers(
        metavar = 'cmd',
        help = 'Subcommand to execute',
    )

    # Common subparser for accepting a case matrix
    case_matrix_parser = argparse.ArgumentParser(add_help = False)
    case_matrix_parser.add_argument(
        '-f', '--file',
        help = 'Name of file with case matrix parameters.',
        default = 'case_matrix.csv',
    )
    case_matrix_parser.add_argument(
        'selector',
        help = 'Glob or Python expression used to filter cases',
        default = 'True',
        nargs = '?',
    )

    # Init command
    init_parser = subparsers.add_parser(
        'init',
         help = init.__doc__,
         description = init.__doc__,
    )
    init_parser.add_argument(
        'folder',
        help = 'Folder where case matrix template will be created [def: cwd]',
        nargs = '?',
        default = os.getcwd(),
    )
    init_parser.set_defaults(func = init)

    # Create command
    create_parser = subparsers.add_parser(
        'create',
        help = create.__doc__,
        description = create.__doc__,
        parents = [case_matrix_parser],
    )
    create_parser.add_argument(
        '--force',
        help = 'Overwrite existing working files',
        default = False,
        action = 'store_true',
    )
    create_parser.set_defaults(func = create)

    # Run command
    run_parser = subparsers.add_parser(
        'run',
        help = run.__doc__,
        description = run.__doc__,
        parents = [case_matrix_parser],
    )
    run_parser.add_argument(
        '-j', '--jobs',
        help = 'Number of jobs used to run cases in parallel',
        type = int,
        default = 1,
    )
    run_parser.set_defaults(func = run)

    # Submit command
    submit_parser = subparsers.add_parser(
        'submit',
        help = submit.__doc__,
        description = submit.__doc__,
        parents = [case_matrix_parser],
    )
    submit_parser.add_argument(
        'qargs',
        help = 'Additional arguments passed to qsub command',
        default = [],
        nargs = '*',
    )
    submit_parser.set_defaults(func = submit)

    # Updated command
    update_parser = subparsers.add_parser(
        'update',
        help = update.__doc__,
        description = update.__doc__,
        parents = [case_matrix_parser],
    )
    update_parser.set_defaults(func = update)

    return parser


#---- Main Program -------------------------------------------------------------
if __name__ == '__main__':
    parser = build_parser()
    args = parser.parse_args()
    logging.basicConfig(
        level=args.loglevel,
        format='%(levelname)s: %(message)s',
    )
    if args.func is init:
        init(args)
    else:
        proj = ProjectStructure(args.file)
        args.func(proj,args)
